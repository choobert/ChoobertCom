{
  "blog": [
    {
      "title": "Unity Game Framework - Creating the GameManager",
      "date": "04/03/2015",
      "content": [
        {
          "type": "text",
          "content": [
            "The Unity Game Framework is a series of posts demonstrating how to get a basic structure for your game",
            "up and running quickly and effectively. This is the first post in the series. To jump to the end, all",
            "code and assets are available on <a href=\"https://github.com/choobert/UnityPlatformerFramework\">GitHub</a>."
          ]
        },
        {
          "type": "text",
          "content": [
            "Without further ado, lets start with the Game Manager class. As a singleton, we are",
            "able to easily and efficiently track the current state of the game from anywhere within our game. This class",
            "will be the key towards managing the current state of the game, remembering our score, and handling",
            "the advancing of levels."
          ]
        },
        {
          "type": "text",
          "content": [
            "Lets get started by creating a new C# Script in Unity called GameManager. When the script loads, delete the",
            "Start and Update functions we don't need them. Instead lets create a static instance variable and our",
            "function to grab the instance as shown below. First we want to check if the instance is null, if it is,",
            "lets see if we can find the GameManager within the game. If we aren't able to find it anywhere in the game,",
            "then we must create a new one. Lastly, we call the DontDestroyOnLoad function on our created GameObject",
            "to allow our script to last between level loads."
          ]
        },
        {
          "type": "code",
          "content": [
            "<pre><em>using</em> UnityEngine;",
            "",
            "<em>public class</em> <var>GameManager</var> : <var>MonoBehaviour</var> {",
            "",
            "<em>private static</em> <var>GameManager</var> _instance;",
            "",
            "<comment>/*",
            " * Find/Create/Return our one and only Game Manager object",
            " * for the game",
            " **/</comment>",
            "<em>public static</em> <var>GameManager</var> Instance {",
            "  get {",
            "    <comment>// if we do not have an instance already, lets look to see",
            "    // if one has already been created for us</comment>",
            "    <em>if</em> (_instance == <em>null</em>) {",
            "      _instance = <var>Object</var>.FindObjectOfType();",
            "    }",
            "",
            "    <comment>// If we still don't have an instance, one must not be created",
            "    // so lets create our own and prevent it from being deleted",
            "    // when the level changes</comment>",
            "    <em>if</em> (_instance == <em>null</em>) {",
            "      <var>GameObject</var> go = <em>new</em> <var>GameObject</var>(<string>hi</string>);",
            "      DontDestroyOnLoad(go);",
            "      _instance = go.AddComponent();",
            "    }",
            "",
            "    return _instance;",
            "  }",
            "}</pre>"
          ]
        },
        {
          "type": "text",
          "content": [
            "Now that we are capable of getting our GameManager within our game, let's make it a little more useful. Start by adding an enum for",
            "GameState as well as a delegate function to be used for alerting our other objects when the state of the game is changing."
          ]
        },
        {
          "type": "code",
          "content": [
            "<pre>",
              "<em>public enum</em> <var>GameState</var> {NullState, MainMenu, PauseMenu, Game}",
              "<em>public delegate void</em> <var>OnStateChangeHandler()</var>;</pre>"
          ]
        },
        {
          "type": "text",
          "content": [
            "We now need to create a function for setting the GameState within our game. When it is called it will call all of the",
            "functions associated with our OnStateChangeHandler. This is very useful in updating multiple objects on an event such as",
            "starting a level, or pausing the game. But, we will go into more details about that in a future tutorial."
          ]
        },
        {
          "type": "code",
          "content": [
            "<pre>",
            "<comment>/*",
            " * Update the Game State and call any Game State Change Handlers that have",
            " * been added",
            " **/</comment>",
            " <em>public void</em> <var>SetGameState</var>(<var>GameState</var> aGameState) {",
            "    gameState = aGameState;",
            "",
            "    <em>if</em>(OnStateChange != <em>null</em>) {",
            "        OnStateChange();",
            "    }",
            "}</pre>"
          ]
        },
        {
          "type": "text",
          "content": [
            "We should now have a pretty functional GameManager class. The only thing left to do is test it. Lets do this by creating another class called Level.",
            "Level will simply wake up and add a Game State Change function and log the current state of the game. Then when the script starts it will",
            "change the state to playing. This will trigger the OnStateChangeHandler to fire telling our level to log the new state of the game."
          ]
        },
        {
          "type": "code",
          "content": [
            "<pre>",
            "<em>using</em> UnityEngine;",
            "<em>using</em> System.Collections;",
            "",
            "<em>public class</em> <var>Level</var> : <var>MonoBehaviour</var> {",
            "",
            "  <var>GameManager</var> gm;",
            "",
            "  <em>void</em> Awake() {",
            "    gm = <var>GameManager</var>.Instance;",
            "    gm.OnStateChange += HandleOnStateChange;",
            "",
            "    <var>Debug</var>.Log (<string>\"Level:Awake - Game State: \"</string> + gm.gameState);",
            "  }",
            "",
            "  <em>void</em> Start () {",
            "    <var>Debug</var>.Log (<string>\"Level:Start - Game State: \"</string> + gm.gameState);",
            "    gm.SetGameState(GameState.Game);",
            "  }",
            "",
            "    <em>void</em> HandleOnStateChange () {",
            "      <var>Debug</var>.Log (<string>\"Game State changing to: \"</string> + gm.gameState);",
            "  }",
            "}</pre>"
          ]
        },
        {
          "type": "text",
          "content": [
            "In Unity, attach this to a new GameObject. You should only have a Main Camera and this GameObject. Attach the Level Script to the GameObject and play the game.",
            "You should see a _GameManager object created and the following logs."
          ]
        },
        {
          "type": "center",
          "content": [
            "<a href=\"https://choobert.files.wordpress.com/2015/04/frameworklogs1.png\">",
            " <img class='aligncenter size-full wp-image-114' src='https://choobert.files.wordpress.com/2015/04/frameworklogs1.png' />",
            "</a>"
          ]
        },
        {
          "type": "text",
          "content": [
            "Success! With the base of our GameManager complete, we can now move on to the next important part of the Game, the UI. This will explain the basics of setting up the HUD, and menus."
          ]
        }
      ]
    }
  ]
}
